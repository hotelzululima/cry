#!/usr/bin/env node

var net = require ('net');
var spawn = require ("child_process").spawn
var rl = require ('readline').createInterface (
		process.stdin, process.stdout, completer);
var UUID = 0;
var port = 9999
var host = undefined
var key = ""
var cry = __dirname + "/cry"
var forward = false; // not yet implemented
var reconnect = true;
var reconnect_every = 5;

switch (process.argv.length) {
case 4:
	key = process.argv[2]
	port = process.argv[3]
	break;
case 5:
	key = process.argv[2]
	host = process.argv[3]
	port = process.argv[4]
	break;
default:
	console.log ("client: cryo [pubkey] [host] [port]")
	console.log ("server: cryo [pubkey] [port]")
	process.exit (1);
	break;
}

var enc = (function (msg, cb) {
	var p = spawn (cry, ['-e', key]);
	var body = "";
	p.stdout.on ('data', function (data) {
		body += data;
	});
	p.stdout.on ('close', function (code) {
		cb (body);
	});
	p.stdin.write (msg)
	p.stdin.on ("drain", function () {
		p.stdin.end ();
	});
})

var dec = (function (msg, cb) {
	var body = "";
	var p = spawn (cry, ['-d']);
	p.stderr.on ('data', function (data) {
		data = (""+data).trim ()
		if (data.indexOf (' ') != -1)
			console.log ("ERROR "+data);
	});
	p.stdout.on ('data', function (data) {
		body += data;
	});
	p.stdout.on ('close', function (code) {
		cb (key, body);
	});
	p.stdin.write (msg.replace (/\r/g,''));
	p.stdin.on ("drain", function () {
		p.stdin.end ();
	});
})

function completer (line) {
	var completions = '/connect /disconnect /exit /key /list /peer'.split (' ');
	var hits = completions.filter(function(c) {
			if (c.indexOf(line) == 0) {
				return c;
			}});
	return [hits && hits.length ? hits : completions, line];
}

var peers = [];
var peer = undefined

function set_key (k) {
	if (peer) {
		rl.set_prompt (peer.key = k)
	}
}

function set_peer (n) {
	var i = 0;
	for (var p in peers) {
		if (n == i++) {
			if ((peer = peers[p])) {
				key = peer.key;
				return true;
			}
			return false;
		}
	}
	return false;
}

function list_peers () {
	var i = 0;
	for (var x in peers) {
		var p = peers[x];
		console.log (peer == p? '*': ' ', i, p.host+":"+p.port, p.key);
		i++;
	}
}

var offline = function () {
	status ("offline");
	console.log ("offline");
}
var sendmsg = offline;

function cryo_disconnect (host, port) {
	peer.destroy ();
}

var _status = undefined;
function status(x) {
	return x? _status = x: _status;
}

function cryo_connect (host, port) {
	status ("connecting");
	//console.log ("Connecting...");
	var c = net.connect (port, host, function () {
		status ("connected")
		var uuid = UUID++;
		peers[uuid] = c;
		c.setNoDelay ();
		console.log('connected');
		sendmsg = function (data) {
			enc (data, function (x) {
				try {
					c.write (x)
				} catch (e) {
					console.log ("cannot write")
				}
			});
		}
		c.on ('data', function (data) {
			var input = (""+data).replace (/==/,'_=').split ('=');
			for (var i=0; i<input.length;i++) {
				var str = input[i].trim ().replace(/_/,'=') + "=";
				if (str == "=") continue;
				dec (str, function (x, y) {
					console.log ("\r<"+key+"> "+y.trim ())
					rl.prompt ();
				});
			}
		});
		c.on ('end', function () {
			console.log ('peer disconnected');
			/* if (peer == c) {
				if (!set_peer (0))
					sendmsg = offline;
			} */
			sendmsg = offline;
			delete peers[uuid];
		});
	});
	c.on ('error', offline);
}

function cryo_listen (port) {
	/* listen */
	var server = net.createServer (function (c) {
		var uuid = UUID++;
		c.on ('error', offline);
		c.setNoDelay ();
		console.log ("Client connected");
		var p = peer = peers[uuid] = {
			'host' : c.remoteAddress,
			'port' : c.remotePort,
			'uuid' : uuid,
			'key' : key,
			'socket': c
		}
		rl.set_prompt (key)
		sendmsg = function (data) {
			enc (data, function (x) {
				try {
					if (peer)
						peer.socket.write (x)
				} catch (e) {
					console.log ("cannot write")
				}
			});
		}
		var input = "";
		c.on ('data', function (data) {
			var input = (""+data).replace (/==/,'_=').split ('=');
			for (var i=0; i<input.length;i++) {
				var str = input[i].trim ().replace(/_/,'=') + "=";
				if (str == "=") continue;
				dec (str, function (x, y) {
					console.log ("\r<"+key+"> "+y.trim ())
					rl.prompt ();
				});
			}
		});
		c.on ('end', function () {
			console.log ('peer disconnected');
			peers[uuid] = undefined
		});
	});
	server.listen (port, function() {
		console.log ('listening on', port);
	});
}

/* main */
if (host) {
	cryo_connect (host, port);
	// XXX
	if (reconnect) {
		setInterval (function (x) {
			if (sendmsg == offline) {
				if (status () == "connecting")
					return;
				console.log ("reconnecting...");
				cryo_connect (host, port);
			}
		} , reconnect_every*1000);
	}
} else cryo_listen (port);
rl.set_prompt = function (x) {
	if (x) rl.setPrompt ('\x1b[32m<'+x+'> \x1b[0m', x.length+3);
}
rl.set_prompt (key)
rl.prompt ();

rl.on ('line', function (line) {
	var str = line.trim ();
	if (str[0] == '/') {
		var args = str.substring (1).split (/ /);
		switch (args[0]) {
		case 'connect':
			if (args[1]) host = args[1]
			if (args[2]) port = args[2]
			cryo_disconnect ();
			cryo_connect (host, port)
			break;
		case 'disconnect':
			cryo_disconnect ();
			break;
		case 'key':
			if (args[1]) {
				set_key (args[1]);
				if (key) rl.set_prompt (key = args[1]);
			} else console.log (key);
			break;
		case 'peer':
			if (args[1]) {
				set_peer (args[1]);
			} else {
				if (peer) console.log (peer.uuid);
			}
			break;
		case 'list':
			list_peers ();
			break;
		case 'exit':
			console.log ("byebye");
			process.exit (0);
			break;
		}
	} else {
		var str = line.trim ();
		if (str.length>0) sendmsg (str);
	}
	rl.prompt ();
}).on ('close', function () {
	console.log ("^D");
	process.exit (0);
});

