#!/usr/bin/env node

var port = 9999
var host = undefined
var key = ""

switch (process.argv.length) {
case 4:
	key = process.argv[2]
	port = process.argv[3]
	break;
case 5:
	key = process.argv[2]
	host = process.argv[3]
	port = process.argv[4]
	break;
default:
	console.log ("client: cryo [pubkey] [host] [port]")
	console.log ("server: cryo [pubkey] [port]")
	process.exit (1);
	break;
}

var spawn = require ("child_process").spawn
var enc = (function (msg, cb) {
	var p = spawn ('cry', ['-e', key]);
	var body = "";
	p.stdout.on ('data', function (data) {
		body += data;
	});
	p.stdout.on ('close', function (code) {
		cb (body);
	});
	p.stdin.write (msg)
	p.stdin.on ("drain", function () {
		p.stdin.end ();
	});
})

var dec = (function (msg, cb) {
	var user = "";
	var body = "";
	var p = spawn ('cry', ['-d']);
	p.stderr.on ('data', function (data) {
		if ((""+data).indexOf (' ') != -1)
	console.log ("ERROR "+data);
		else user += data;
	});
	p.stdout.on ('data', function (data) {
		body += data;
	});
	p.stdout.on ('close', function (code) {
		user = user.replace(/\n/g, "");
		cb (key, body);
	});
	p.stdin.write (msg.replace (/\r/g,''));
	p.stdin.on ("drain", function () {
		p.stdin.end ();
	});
})

//process.stdin.resume();
//process.stdin.setEncoding('ascii');

function completer(line) {
	var completions = '/quit /query'.split (' ');
	var hits = completions.filter(function(c) {
			if (c.indexOf(line) == 0) {
				return c;
			}});
	return [hits && hits.length ? hits : completions, line];
}
var rl = require ('readline').createInterface (
		process.stdin, process.stdout, completer);

var net = require('net');
var offline = function () {console.log ("offline"); }
var sendmsg = offline;

if (host) {
	/* connect */
	var c = net.connect (port, host, function () {
		c.on ('error', offline);
		c.setNoDelay ();
		console.log('connected');
		sendmsg = function (data) {
			enc (data, function (x) {
				try {
					c.write (x)
				} catch (e) {
					console.log ("cannot write")
				}
			});
		}
/*
		process.stdin.on ('data', function (data) {
			enc (data, function (x) {
				c.write (""+x);
			});
		});
*/
		c.on ('data', function (data) {
			var input = (""+data).replace (/==/,'_=').split ('=');
			for (var i=0; i<input.length;i++) {
				var str = input[i].trim ().replace(/_/,'=') + "=";
				if (str == "=") continue;
				dec (str, function (x, y) {
					console.log ("\r<"+key+"> "+y.trim ())
					rl.prompt ();
				});
			}
		});
		c.on ('end', function () {
			console.log ('peer disconnected');
		});
	});
} else {
	/* listen */
	var server = net.createServer (function (c) {
		c.on ('error', offline);
		c.setNoDelay ();
		console.log ("Client connected");
		sendmsg = function (data) {
			enc (data, function (x) {
				try {
					c.write (x)
				} catch (e) {
					console.log ("cannot write")
				}
			});
		}
/*
		process.stdin.on ('data', function (data) {
			enc (data, function (x) {
				c.write (x)
			});
		})
*/
		var input = "";
		c.on ('data', function (data) {
			var input = (""+data).replace (/==/,'_=').split ('=');
			for (var i=0; i<input.length;i++) {
				var str = input[i].trim ().replace(/_/,'=') + "=";
				if (str == "=") continue;
				dec (str, function (x, y) {
					console.log ("\r<"+key+"> "+y.trim ())
					rl.prompt ();
				});
			}
		});
		c.on('end', function() {
			console.log('peer disconnected');
		});
	});
	server.listen (port, function() {
		console.log('listening on',port);
	});
}

rl.setPrompt ('<'+key+'> ');
rl.prompt ();

rl.on ('line', function (line) {
	var str = line.trim ();
	if (str[0] == '/') {
		var args = str.substring (1).split (/ /);
		switch (args[0]) {
		case 'query':
			key = args[1];
			rl.setPrompt ('<'+key+'> ');
			break;
		case 'q':
		case 'quit':
			console.log ("byebye");
			process.exit (0);
			break;
		}
	} else sendmsg (line.trim ());
	rl.prompt ();
}).on ('close', function () {
	console.log ("^D");
	process.exit (0);
});
